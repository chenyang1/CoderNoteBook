// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/heartbeat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fheartbeat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fheartbeat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fheartbeat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fheartbeat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fheartbeat_2eproto;
class HeartBeatReqMessage;
struct HeartBeatReqMessageDefaultTypeInternal;
extern HeartBeatReqMessageDefaultTypeInternal _HeartBeatReqMessage_default_instance_;
class HeartBeatRspMessage;
struct HeartBeatRspMessageDefaultTypeInternal;
extern HeartBeatRspMessageDefaultTypeInternal _HeartBeatRspMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::HeartBeatReqMessage* Arena::CreateMaybeMessage<::HeartBeatReqMessage>(Arena*);
template<> ::HeartBeatRspMessage* Arena::CreateMaybeMessage<::HeartBeatRspMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum HeartBeatReqMessage_MachineEnum : int {
  HeartBeatReqMessage_MachineEnum_E_PC = 0,
  HeartBeatReqMessage_MachineEnum_E_IOS = 1,
  HeartBeatReqMessage_MachineEnum_E_ANDRIOD = 2,
  HeartBeatReqMessage_MachineEnum_HeartBeatReqMessage_MachineEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HeartBeatReqMessage_MachineEnum_HeartBeatReqMessage_MachineEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HeartBeatReqMessage_MachineEnum_IsValid(int value);
constexpr HeartBeatReqMessage_MachineEnum HeartBeatReqMessage_MachineEnum_MachineEnum_MIN = HeartBeatReqMessage_MachineEnum_E_PC;
constexpr HeartBeatReqMessage_MachineEnum HeartBeatReqMessage_MachineEnum_MachineEnum_MAX = HeartBeatReqMessage_MachineEnum_E_ANDRIOD;
constexpr int HeartBeatReqMessage_MachineEnum_MachineEnum_ARRAYSIZE = HeartBeatReqMessage_MachineEnum_MachineEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeartBeatReqMessage_MachineEnum_descriptor();
template<typename T>
inline const std::string& HeartBeatReqMessage_MachineEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HeartBeatReqMessage_MachineEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HeartBeatReqMessage_MachineEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HeartBeatReqMessage_MachineEnum_descriptor(), enum_t_value);
}
inline bool HeartBeatReqMessage_MachineEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HeartBeatReqMessage_MachineEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HeartBeatReqMessage_MachineEnum>(
    HeartBeatReqMessage_MachineEnum_descriptor(), name, value);
}
// ===================================================================

class HeartBeatReqMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HeartBeatReqMessage) */ {
 public:
  inline HeartBeatReqMessage() : HeartBeatReqMessage(nullptr) {}
  ~HeartBeatReqMessage() override;
  explicit constexpr HeartBeatReqMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatReqMessage(const HeartBeatReqMessage& from);
  HeartBeatReqMessage(HeartBeatReqMessage&& from) noexcept
    : HeartBeatReqMessage() {
    *this = ::std::move(from);
  }

  inline HeartBeatReqMessage& operator=(const HeartBeatReqMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatReqMessage& operator=(HeartBeatReqMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatReqMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatReqMessage* internal_default_instance() {
    return reinterpret_cast<const HeartBeatReqMessage*>(
               &_HeartBeatReqMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HeartBeatReqMessage& a, HeartBeatReqMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatReqMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatReqMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeatReqMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeatReqMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatReqMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeartBeatReqMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatReqMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HeartBeatReqMessage";
  }
  protected:
  explicit HeartBeatReqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HeartBeatReqMessage_MachineEnum MachineEnum;
  static constexpr MachineEnum E_PC =
    HeartBeatReqMessage_MachineEnum_E_PC;
  static constexpr MachineEnum E_IOS =
    HeartBeatReqMessage_MachineEnum_E_IOS;
  static constexpr MachineEnum E_ANDRIOD =
    HeartBeatReqMessage_MachineEnum_E_ANDRIOD;
  static inline bool MachineEnum_IsValid(int value) {
    return HeartBeatReqMessage_MachineEnum_IsValid(value);
  }
  static constexpr MachineEnum MachineEnum_MIN =
    HeartBeatReqMessage_MachineEnum_MachineEnum_MIN;
  static constexpr MachineEnum MachineEnum_MAX =
    HeartBeatReqMessage_MachineEnum_MachineEnum_MAX;
  static constexpr int MachineEnum_ARRAYSIZE =
    HeartBeatReqMessage_MachineEnum_MachineEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MachineEnum_descriptor() {
    return HeartBeatReqMessage_MachineEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& MachineEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MachineEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MachineEnum_Name.");
    return HeartBeatReqMessage_MachineEnum_Name(enum_t_value);
  }
  static inline bool MachineEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MachineEnum* value) {
    return HeartBeatReqMessage_MachineEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTraceIdFieldNumber = 1,
    kIpFieldNumber = 2,
    kTimeFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // uint32 trace_id = 1;
  void clear_trace_id();
  uint32_t trace_id() const;
  void set_trace_id(uint32_t value);
  private:
  uint32_t _internal_trace_id() const;
  void _internal_set_trace_id(uint32_t value);
  public:

  // uint32 ip = 2;
  void clear_ip();
  uint32_t ip() const;
  void set_ip(uint32_t value);
  private:
  uint32_t _internal_ip() const;
  void _internal_set_ip(uint32_t value);
  public:

  // uint32 time = 3;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // .HeartBeatReqMessage.MachineEnum type = 4;
  void clear_type();
  ::HeartBeatReqMessage_MachineEnum type() const;
  void set_type(::HeartBeatReqMessage_MachineEnum value);
  private:
  ::HeartBeatReqMessage_MachineEnum _internal_type() const;
  void _internal_set_type(::HeartBeatReqMessage_MachineEnum value);
  public:

  // @@protoc_insertion_point(class_scope:HeartBeatReqMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t trace_id_;
  uint32_t ip_;
  uint32_t time_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fheartbeat_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatRspMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HeartBeatRspMessage) */ {
 public:
  inline HeartBeatRspMessage() : HeartBeatRspMessage(nullptr) {}
  ~HeartBeatRspMessage() override;
  explicit constexpr HeartBeatRspMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatRspMessage(const HeartBeatRspMessage& from);
  HeartBeatRspMessage(HeartBeatRspMessage&& from) noexcept
    : HeartBeatRspMessage() {
    *this = ::std::move(from);
  }

  inline HeartBeatRspMessage& operator=(const HeartBeatRspMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatRspMessage& operator=(HeartBeatRspMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatRspMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatRspMessage* internal_default_instance() {
    return reinterpret_cast<const HeartBeatRspMessage*>(
               &_HeartBeatRspMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HeartBeatRspMessage& a, HeartBeatRspMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatRspMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatRspMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeatRspMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeatRspMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatRspMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeartBeatRspMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatRspMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HeartBeatRspMessage";
  }
  protected:
  explicit HeartBeatRspMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceIdFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // uint32 trace_id = 1;
  void clear_trace_id();
  uint32_t trace_id() const;
  void set_trace_id(uint32_t value);
  private:
  uint32_t _internal_trace_id() const;
  void _internal_set_trace_id(uint32_t value);
  public:

  // uint32 ret = 2;
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HeartBeatRspMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t trace_id_;
  uint32_t ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fheartbeat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeartBeatReqMessage

// uint32 trace_id = 1;
inline void HeartBeatReqMessage::clear_trace_id() {
  trace_id_ = 0u;
}
inline uint32_t HeartBeatReqMessage::_internal_trace_id() const {
  return trace_id_;
}
inline uint32_t HeartBeatReqMessage::trace_id() const {
  // @@protoc_insertion_point(field_get:HeartBeatReqMessage.trace_id)
  return _internal_trace_id();
}
inline void HeartBeatReqMessage::_internal_set_trace_id(uint32_t value) {
  
  trace_id_ = value;
}
inline void HeartBeatReqMessage::set_trace_id(uint32_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:HeartBeatReqMessage.trace_id)
}

// uint32 ip = 2;
inline void HeartBeatReqMessage::clear_ip() {
  ip_ = 0u;
}
inline uint32_t HeartBeatReqMessage::_internal_ip() const {
  return ip_;
}
inline uint32_t HeartBeatReqMessage::ip() const {
  // @@protoc_insertion_point(field_get:HeartBeatReqMessage.ip)
  return _internal_ip();
}
inline void HeartBeatReqMessage::_internal_set_ip(uint32_t value) {
  
  ip_ = value;
}
inline void HeartBeatReqMessage::set_ip(uint32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:HeartBeatReqMessage.ip)
}

// uint32 time = 3;
inline void HeartBeatReqMessage::clear_time() {
  time_ = 0u;
}
inline uint32_t HeartBeatReqMessage::_internal_time() const {
  return time_;
}
inline uint32_t HeartBeatReqMessage::time() const {
  // @@protoc_insertion_point(field_get:HeartBeatReqMessage.time)
  return _internal_time();
}
inline void HeartBeatReqMessage::_internal_set_time(uint32_t value) {
  
  time_ = value;
}
inline void HeartBeatReqMessage::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:HeartBeatReqMessage.time)
}

// .HeartBeatReqMessage.MachineEnum type = 4;
inline void HeartBeatReqMessage::clear_type() {
  type_ = 0;
}
inline ::HeartBeatReqMessage_MachineEnum HeartBeatReqMessage::_internal_type() const {
  return static_cast< ::HeartBeatReqMessage_MachineEnum >(type_);
}
inline ::HeartBeatReqMessage_MachineEnum HeartBeatReqMessage::type() const {
  // @@protoc_insertion_point(field_get:HeartBeatReqMessage.type)
  return _internal_type();
}
inline void HeartBeatReqMessage::_internal_set_type(::HeartBeatReqMessage_MachineEnum value) {
  
  type_ = value;
}
inline void HeartBeatReqMessage::set_type(::HeartBeatReqMessage_MachineEnum value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:HeartBeatReqMessage.type)
}

// -------------------------------------------------------------------

// HeartBeatRspMessage

// uint32 trace_id = 1;
inline void HeartBeatRspMessage::clear_trace_id() {
  trace_id_ = 0u;
}
inline uint32_t HeartBeatRspMessage::_internal_trace_id() const {
  return trace_id_;
}
inline uint32_t HeartBeatRspMessage::trace_id() const {
  // @@protoc_insertion_point(field_get:HeartBeatRspMessage.trace_id)
  return _internal_trace_id();
}
inline void HeartBeatRspMessage::_internal_set_trace_id(uint32_t value) {
  
  trace_id_ = value;
}
inline void HeartBeatRspMessage::set_trace_id(uint32_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:HeartBeatRspMessage.trace_id)
}

// uint32 ret = 2;
inline void HeartBeatRspMessage::clear_ret() {
  ret_ = 0u;
}
inline uint32_t HeartBeatRspMessage::_internal_ret() const {
  return ret_;
}
inline uint32_t HeartBeatRspMessage::ret() const {
  // @@protoc_insertion_point(field_get:HeartBeatRspMessage.ret)
  return _internal_ret();
}
inline void HeartBeatRspMessage::_internal_set_ret(uint32_t value) {
  
  ret_ = value;
}
inline void HeartBeatRspMessage::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:HeartBeatRspMessage.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::HeartBeatReqMessage_MachineEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HeartBeatReqMessage_MachineEnum>() {
  return ::HeartBeatReqMessage_MachineEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fheartbeat_2eproto
