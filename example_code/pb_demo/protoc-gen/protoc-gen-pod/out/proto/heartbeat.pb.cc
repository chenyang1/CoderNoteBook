// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/heartbeat.proto

#include "proto/heartbeat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr HeartBeatReqMessage::HeartBeatReqMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trace_id_(0u)
  , ip_(0u)
  , time_(0u)
  , type_(0)
{}
struct HeartBeatReqMessageDefaultTypeInternal {
  constexpr HeartBeatReqMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartBeatReqMessageDefaultTypeInternal() {}
  union {
    HeartBeatReqMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartBeatReqMessageDefaultTypeInternal _HeartBeatReqMessage_default_instance_;
constexpr HeartBeatRspMessage::HeartBeatRspMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trace_id_(0u)
  , ret_(0u){}
struct HeartBeatRspMessageDefaultTypeInternal {
  constexpr HeartBeatRspMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartBeatRspMessageDefaultTypeInternal() {}
  union {
    HeartBeatRspMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartBeatRspMessageDefaultTypeInternal _HeartBeatRspMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fheartbeat_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fheartbeat_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fheartbeat_2eproto = nullptr;

const uint32_t TableStruct_proto_2fheartbeat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HeartBeatReqMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HeartBeatReqMessage, trace_id_),
  PROTOBUF_FIELD_OFFSET(::HeartBeatReqMessage, ip_),
  PROTOBUF_FIELD_OFFSET(::HeartBeatReqMessage, time_),
  PROTOBUF_FIELD_OFFSET(::HeartBeatReqMessage, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HeartBeatRspMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HeartBeatRspMessage, trace_id_),
  PROTOBUF_FIELD_OFFSET(::HeartBeatRspMessage, ret_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::HeartBeatReqMessage)},
  { 10, -1, -1, sizeof(::HeartBeatRspMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HeartBeatReqMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HeartBeatRspMessage_default_instance_),
};

const char descriptor_table_protodef_proto_2fheartbeat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025proto/heartbeat.proto\"\244\001\n\023HeartBeatReq"
  "Message\022\020\n\010trace_id\030\001 \001(\r\022\n\n\002ip\030\002 \001(\r\022\014\n"
  "\004time\030\003 \001(\r\022.\n\004type\030\004 \001(\0162 .HeartBeatReq"
  "Message.MachineEnum\"1\n\013MachineEnum\022\010\n\004E_"
  "PC\020\000\022\t\n\005E_IOS\020\001\022\r\n\tE_ANDRIOD\020\002\"4\n\023HeartB"
  "eatRspMessage\022\020\n\010trace_id\030\001 \001(\r\022\013\n\003ret\030\002"
  " \001(\rB\014Z\n.;protocolb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fheartbeat_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fheartbeat_2eproto = {
  false, false, 266, descriptor_table_protodef_proto_2fheartbeat_2eproto, "proto/heartbeat.proto", 
  &descriptor_table_proto_2fheartbeat_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_proto_2fheartbeat_2eproto::offsets,
  file_level_metadata_proto_2fheartbeat_2eproto, file_level_enum_descriptors_proto_2fheartbeat_2eproto, file_level_service_descriptors_proto_2fheartbeat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fheartbeat_2eproto_getter() {
  return &descriptor_table_proto_2fheartbeat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fheartbeat_2eproto(&descriptor_table_proto_2fheartbeat_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeartBeatReqMessage_MachineEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fheartbeat_2eproto);
  return file_level_enum_descriptors_proto_2fheartbeat_2eproto[0];
}
bool HeartBeatReqMessage_MachineEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HeartBeatReqMessage_MachineEnum HeartBeatReqMessage::E_PC;
constexpr HeartBeatReqMessage_MachineEnum HeartBeatReqMessage::E_IOS;
constexpr HeartBeatReqMessage_MachineEnum HeartBeatReqMessage::E_ANDRIOD;
constexpr HeartBeatReqMessage_MachineEnum HeartBeatReqMessage::MachineEnum_MIN;
constexpr HeartBeatReqMessage_MachineEnum HeartBeatReqMessage::MachineEnum_MAX;
constexpr int HeartBeatReqMessage::MachineEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class HeartBeatReqMessage::_Internal {
 public:
};

HeartBeatReqMessage::HeartBeatReqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HeartBeatReqMessage)
}
HeartBeatReqMessage::HeartBeatReqMessage(const HeartBeatReqMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trace_id_, &from.trace_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&trace_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:HeartBeatReqMessage)
}

inline void HeartBeatReqMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trace_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&trace_id_)) + sizeof(type_));
}

HeartBeatReqMessage::~HeartBeatReqMessage() {
  // @@protoc_insertion_point(destructor:HeartBeatReqMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeartBeatReqMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartBeatReqMessage::ArenaDtor(void* object) {
  HeartBeatReqMessage* _this = reinterpret_cast< HeartBeatReqMessage* >(object);
  (void)_this;
}
void HeartBeatReqMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeatReqMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeartBeatReqMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartBeatReqMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trace_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&trace_id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatReqMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HeartBeatReqMessage.MachineEnum type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::HeartBeatReqMessage_MachineEnum>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeatReqMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeartBeatReqMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 trace_id = 1;
  if (this->_internal_trace_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_trace_id(), target);
  }

  // uint32 ip = 2;
  if (this->_internal_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ip(), target);
  }

  // uint32 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time(), target);
  }

  // .HeartBeatReqMessage.MachineEnum type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartBeatReqMessage)
  return target;
}

size_t HeartBeatReqMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartBeatReqMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 trace_id = 1;
  if (this->_internal_trace_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_trace_id());
  }

  // uint32 ip = 2;
  if (this->_internal_ip() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ip());
  }

  // uint32 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // .HeartBeatReqMessage.MachineEnum type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeatReqMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeartBeatReqMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeatReqMessage::GetClassData() const { return &_class_data_; }

void HeartBeatReqMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeartBeatReqMessage *>(to)->MergeFrom(
      static_cast<const HeartBeatReqMessage &>(from));
}


void HeartBeatReqMessage::MergeFrom(const HeartBeatReqMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeartBeatReqMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_trace_id() != 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from._internal_ip() != 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeatReqMessage::CopyFrom(const HeartBeatReqMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartBeatReqMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatReqMessage::IsInitialized() const {
  return true;
}

void HeartBeatReqMessage::InternalSwap(HeartBeatReqMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartBeatReqMessage, type_)
      + sizeof(HeartBeatReqMessage::type_)
      - PROTOBUF_FIELD_OFFSET(HeartBeatReqMessage, trace_id_)>(
          reinterpret_cast<char*>(&trace_id_),
          reinterpret_cast<char*>(&other->trace_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatReqMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fheartbeat_2eproto_getter, &descriptor_table_proto_2fheartbeat_2eproto_once,
      file_level_metadata_proto_2fheartbeat_2eproto[0]);
}

// ===================================================================

class HeartBeatRspMessage::_Internal {
 public:
};

HeartBeatRspMessage::HeartBeatRspMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HeartBeatRspMessage)
}
HeartBeatRspMessage::HeartBeatRspMessage(const HeartBeatRspMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trace_id_, &from.trace_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&trace_id_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:HeartBeatRspMessage)
}

inline void HeartBeatRspMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trace_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&trace_id_)) + sizeof(ret_));
}

HeartBeatRspMessage::~HeartBeatRspMessage() {
  // @@protoc_insertion_point(destructor:HeartBeatRspMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeartBeatRspMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartBeatRspMessage::ArenaDtor(void* object) {
  HeartBeatRspMessage* _this = reinterpret_cast< HeartBeatRspMessage* >(object);
  (void)_this;
}
void HeartBeatRspMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeatRspMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeartBeatRspMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartBeatRspMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trace_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&trace_id_)) + sizeof(ret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatRspMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeatRspMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeartBeatRspMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 trace_id = 1;
  if (this->_internal_trace_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_trace_id(), target);
  }

  // uint32 ret = 2;
  if (this->_internal_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartBeatRspMessage)
  return target;
}

size_t HeartBeatRspMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartBeatRspMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 trace_id = 1;
  if (this->_internal_trace_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_trace_id());
  }

  // uint32 ret = 2;
  if (this->_internal_ret() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeatRspMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeartBeatRspMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeatRspMessage::GetClassData() const { return &_class_data_; }

void HeartBeatRspMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeartBeatRspMessage *>(to)->MergeFrom(
      static_cast<const HeartBeatRspMessage &>(from));
}


void HeartBeatRspMessage::MergeFrom(const HeartBeatRspMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeartBeatRspMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_trace_id() != 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from._internal_ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeatRspMessage::CopyFrom(const HeartBeatRspMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartBeatRspMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRspMessage::IsInitialized() const {
  return true;
}

void HeartBeatRspMessage::InternalSwap(HeartBeatRspMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartBeatRspMessage, ret_)
      + sizeof(HeartBeatRspMessage::ret_)
      - PROTOBUF_FIELD_OFFSET(HeartBeatRspMessage, trace_id_)>(
          reinterpret_cast<char*>(&trace_id_),
          reinterpret_cast<char*>(&other->trace_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatRspMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fheartbeat_2eproto_getter, &descriptor_table_proto_2fheartbeat_2eproto_once,
      file_level_metadata_proto_2fheartbeat_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HeartBeatReqMessage* Arena::CreateMaybeMessage< ::HeartBeatReqMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HeartBeatReqMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::HeartBeatRspMessage* Arena::CreateMaybeMessage< ::HeartBeatRspMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HeartBeatRspMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
